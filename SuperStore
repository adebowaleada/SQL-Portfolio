--Are average monthly sales increasing over time? 
SELECT order_month
 	, DATE_PART ('year', order_month)
	, AVG (monthly_sales_total) :: money
FROM (SELECT DATE_TRUNC ('month', order_date) AS order_month
	, SUM(sales) AS monthly_sales_total
FROM orders
GROUP BY order_date) AS monthly_sales
GROUP BY order_month

-- How many orders had a product with a cost to consumer over $500? 
SELECT * 
FROM orders 
WHERE product_id IN (SELECT product_id
FROM products
WHERE product_cost_to_consumer > 500)

--How much revenue is generated by suppliers vs frequent customers vs all others?
SELECT DISTINCT customer_type
	, SUM(total_spend) :: money AS customer_spend
	, SUM (order_count) AS number_of_orders
FROM (SELECT customer_id
	, COUNT (order_id) AS order_count
	, SUM (sales) AS total_spend
	, CASE WHEN COUNT(order_id) > 1000 THEN 'Supplier'
			WHEN COUNT(order_id) > 100 THEN 'Frequent'
		ELSE 'All Other'
		END AS customer_type
FROM orders
GROUP BY customer_id) AS customer_type_summary
GROUP BY customer_type

--Are returns seasonal? Alternatively: Is there a pattern for what day of week or time of year orders are placed that ultimately get returned?
SELECT SUM(return_quantity) AS total_returned, 
	DATE_PART ('month', return_date) AS return_month , 
	DATE_PART ('year' , return_date) AS return_year
FROM returns
GROUP BY 2,3 
ORDER BY 1 DESC;

--Which country is the most profitable?
SELECT DISTINCT country , 
	SUM (orders.profit) :: money AS total_profit
FROM orders
JOIN regions USING (region_id)
GROUP BY country 
ORDER BY total_profit DESC; 

--What is the return rate for each product sub-category? (What percentage of orders are returned by product sub-category)
SELECT sub_category ,  
	AVG (CASE WHEN returns.order_id IS NOT NULL THEN '1'
		ELSE 0 
		END) *100 AS return_flag  
FROM orders
LEFT JOIN returns ON orders.order_id = returns.order_id 
JOIN products USING (product_id )
GROUP BY sub_category 
ORDER BY 2 DESC;

--Total revenue by customer segment, per month
SELECT segment, 
	AVG(total_sales) :: money
FROM (SELECT customers.segment, 
	DATE_TRUNC ('month', order_date) AS order_month ,
	SUM (sales) AS total_sales
	FROM orders
	INNER JOIN customers USING (customer_id)
	GROUP BY customers.segment, order_month 
	ORDER BY 1,2) AS total_sales
GROUP BY segment

--Which shipping class has the highest total quantity fo shipping items? 
SELECT ship_mode, 
	SUM(quantity) AS total_quantity 
FROM orders 
GROUP BY ship_mode
ORDER BY total_quantity DESC;

--How many orders had three or more items returned? 
SELECT COUNT(order_id)
FROM returns
WHERE CAST(return_quantity AS int) >= 3;

-- What's the least expensive subcategory of products? 
SELECT sub_category, 
	MIN(product_cost_to_consumer) 
FROM products 
GROUP BY sub_category
ORDER BY MIN(product_cost_to_consumer) ASC

--How many orders were over $100 of revenue
SELECT COUNT (*) 
FROM orders
WHERE sales > 100;

-- Count (*) is all rows, COUNT (postal_code) is all rows for which postal code is not null
SELECT COUNT (postal_code) 
FROM orders
WHERE sales > 100;

-- Which products fall in either the furniture or technology categories
SELECT * 
FROM products
WHERE category IN ('Furniture', 'Technology')

--How many orders made with same day shipping?
SELECT COUNT (*) 
FROM orders
WHERE ship_mode = 'Same Day'

--How many salespeople does this store have (Serving all regions)?
SELECT COUNT (DISTINCT salesperson)
FROM regions;

--Which products have cost to consumers between $25 and $100?
SELECT (*)
FROM products
WHERE product_cost_to_consumer BETWEEN 25 AND 100;

--Which orders have sales between $50 and $100?
SELECT * 
FROM orders
WHERE sales BETWEEN 50 AND 100;

--Which products have 'Calculator' in the product name
SELECT * 
FROM products
WHERE product_name LIKE '%Calculator%'
LIMIT 100;

--Which products have 'Printer' in the category name
SELECT * 
FROM products
WHERE product_name ILIKE '%printer%' 
LIMIT 100; 

--Which products are actually printers?
SELECT * 
FROM products
WHERE product_name ILIKE '%printer%' 
	AND category = 'Technology'
	
--Which customers have names that start with "A" and third letter of "r"
SELECT * 
FROM customers
WHERE customer_name ILIKE 'a_r%'
LIMIT 100; 

--What were the top five sales in 2019?
SELECT *
FROM orders
WHERE DATE_PART('year',order_date) =2019
ORDER BY sales DESC;

--Break down discounts into 4 buckets (none, low, high, free)
SELECT product_id
	, sales
	, discount
	,CASE WHEN discount = 1 THEN 'Free'
		WHEN discount BETWEEN 0.25 AND 1 THEN 'High'
		WHEN discount > 0 AND discount <0.25 THEN 'LOW'
		ELSE 'None'
		END AS discount_bucket
FROM orders

--Group orders by whether or not they hae a positive profit
SELECT order_id
	, profit
	, CASE WHEN profit > 0 THEN 'positive'
	  ELSE 'negative'
	END AS profit_category 
FROM orders 

--The number of orders placed on a specific date. 
SELECT order_date
	, COUNT(order_id)
FROM orders
GROUP BY order_date 
LIMIT 100; 

--Find the number of products by category
SELECT category
	, COUNT(product_id)
FROM products
GROUP BY category

-- Which month has the most orders? 
SELECT DATE_PART ('year', order_date),
	DATE_PART ('month', order_date),
	COUNT (order_id)
FROM orders
GROUP BY DATE_PART ('year', order_date),
	DATE_PART ('month', order_date);
LIMIT 100; 

-- How many customers are in each segment
SELECT segment ,
	COUNT (customer_id)
FROM customers 
GROUP BY segment;

--Which product sub-categories have  at least 650 unique products?
SELECT sub_category
	, COUNT (product_id) 
FROM products
GROUP BY sub_category
HAVING COUNT(product_id) > 650;

--How many regions have at least 6 salespeople?
SELECT region
	, COUNT (DISTINCT salesperson)
FROM regions
GROUP BY region
HAVING COUNT (DISTINCT salesperson) > 6 ;

--Summarize orders by return reason
SELECT * 
FROM orders
JOIN returns ON orders.order_id = returns.order_id
LIMIT 100; 

--Join orders and customers
SELECT orders.order_id
	, customers.customer_name
FROM orders
JOIN customers ON orders.customer_id = customers.customer_id
LIMIT 100; 

-- Create a join between orders, customers, and returns
SELECT * 
FROM orders
JOIN returns ON orders.order_id = returns.order_id 
JOIN customers ON orders.customer_id = customers.customer_id
LIMIT 100; 

--How many orders were returned? 
SELECT COUNT (orders) 
FROM orders
JOIN returns ON orders.order_id = returns.order_id 

-- Which profit is the most profitable? 
SELECT products.product_id
	, product_name
	, SUM (profit)
FROM orders
JOIN products on orders.product_id = products.product_id
GROUP BY products.product_id
	, product_name 
--ORDER BY SUM (profit) DESC
ORDER BY 3 DESC;

-- How much sales revenue is each region responsible for?
SELECT region ,
	SUM (sales)
FROM orders
JOIN regions on orders.region_id = regions.region_id
GROUP BY region



